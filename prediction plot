"""
@author: Zongyi Li
This file is the Fourier Neural Operator for 1D problem such as the (time-independent) Burgers equation discussed in Section 5.1 in the [paper](https://arxiv.org/pdf/2010.08895.pdf).
"""

import torch.nn.functional as F
from timeit import default_timer
from utilities3 import *
import matplotlib.pyplot as plt
torch.manual_seed(0)
np.random.seed(0)


################################################################
#  1d fourier layer
################################################################
class SpectralConv1d(nn.Module):
    def __init__(self, in_channels, out_channels, modes1):
        super(SpectralConv1d, self).__init__()

        """
        1D Fourier layer. It does FFT, linear transform, and Inverse FFT.    
        """

        self.in_channels = in_channels
        self.out_channels = out_channels
        self.modes1 = modes1  #Number of Fourier modes to multiply, at most floor(N/2) + 1

        self.scale = (1 / (in_channels*out_channels))
        self.weights1 = nn.Parameter(self.scale * torch.rand(in_channels, out_channels, self.modes1, dtype=torch.cfloat))

    # Complex multiplication
    def compl_mul1d(self, input, weights):
        # (batch, in_channel, x ), (in_channel, out_channel, x) -> (batch, out_channel, x)
        return torch.einsum("bix,iox->box", input, weights)

    def forward(self, x):
        batchsize = x.shape[0]
        #Compute Fourier coeffcients up to factor of e^(- something constant)
        x_ft = torch.fft.rfft(x)

        # Multiply relevant Fourier modes
        out_ft = torch.zeros(batchsize, self.out_channels, x.size(-1)//2 + 1,  device=x.device, dtype=torch.cfloat)
        out_ft[:, :, :self.modes1] = self.compl_mul1d(x_ft[:, :, :self.modes1], self.weights1)

        #Return to physical space
        x = torch.fft.irfft(out_ft, n=x.size(-1))
        return x

class MLP(nn.Module):
    def __init__(self, in_channels, out_channels, mid_channels):
        super(MLP, self).__init__()
        self.mlp1 = nn.Conv1d(in_channels, mid_channels, 1)
        self.mlp2 = nn.Conv1d(mid_channels, out_channels, 1)

    def forward(self, x):
        x = self.mlp1(x)
        x = F.gelu(x)
        x = self.mlp2(x)
        return x

class FNO1d(nn.Module):
    def __init__(self, modes, width):
        super(FNO1d, self).__init__()

        """
        The overall network. It contains 4 layers of the Fourier layer.
        1. Lift the input to the desire channel dimension by self.fc0 .
        2. 4 layers of the integral operators u' = (W + K)(u).
            W defined by self.w; K defined by self.conv .
        3. Project from the channel space to the output space by self.fc1 and self.fc2 .
        
        input: the solution of the initial condition and location (a(x), x)
        input shape: (batchsize, x=s, c=2)
        output: the solution of a later timestep
        output shape: (batchsize, x=s, c=1)
        """

        self.modes1 = modes
        self.width = width
        self.padding = 8 # pad the domain if input is non-periodic

        self.p = nn.Linear(2, self.width) # input channel_dim is 2: (u0(x), x)
        self.conv0 = SpectralConv1d(self.width, self.width, self.modes1)
        self.conv1 = SpectralConv1d(self.width, self.width, self.modes1)
        self.conv2 = SpectralConv1d(self.width, self.width, self.modes1)
        self.conv3 = SpectralConv1d(self.width, self.width, self.modes1)
        self.mlp0 = MLP(self.width, self.width, self.width)
        self.mlp1 = MLP(self.width, self.width, self.width)
        self.mlp2 = MLP(self.width, self.width, self.width)
        self.mlp3 = MLP(self.width, self.width, self.width)
        self.w0 = nn.Conv1d(self.width, self.width, 1)
        self.w1 = nn.Conv1d(self.width, self.width, 1)
        self.w2 = nn.Conv1d(self.width, self.width, 1)
        self.w3 = nn.Conv1d(self.width, self.width, 1)
        self.q = MLP(self.width, 1, self.width*2)  # output channel_dim is 1: u1(x)

    def forward(self, x):
        grid = self.get_grid(x.shape, x.device)
        x = torch.cat((x, grid), dim=-1)
        x = self.p(x)
        x = x.permute(0, 2, 1)
        # x = F.pad(x, [0,self.padding]) # pad the domain if input is non-periodic

        x1 = self.conv0(x)
        x1 = self.mlp0(x1)
        x2 = self.w0(x)
        x = x1 + x2
        x = F.gelu(x)

        x1 = self.conv1(x)
        x1 = self.mlp1(x1)
        x2 = self.w1(x)
        x = x1 + x2
        x = F.gelu(x)

        x1 = self.conv2(x)
        x1 = self.mlp2(x1)
        x2 = self.w2(x)
        x = x1 + x2
        x = F.gelu(x)

        x1 = self.conv3(x)
        x1 = self.mlp3(x1)
        x2 = self.w3(x)
        x = x1 + x2

        # x = x[..., :-self.padding] # pad the domain if input is non-periodic
        x = self.q(x)
        x = x.permute(0, 2, 1)
        return x

    def get_grid(self, shape, device):
        batchsize, size_x = shape[0], shape[1]
        gridx = torch.tensor(np.linspace(0, 1, size_x), dtype=torch.float)
        gridx = gridx.reshape(1, size_x, 1).repeat([batchsize, 1, 1])
        return gridx.to(device)

################################################################
import torch
import math
import torch.nn.functional as F
from torch.utils.data import DataLoader
from timeit import default_timer

# Gaussian Random Field Class
class GaussianRF:
    def __init__(self, size, alpha, tau, sigma, boundary="periodic", device=None):
        self.size = size
        self.device = device

        k_max = size // 2
        k = torch.cat((torch.arange(start=0, end=k_max, step=1, device=device),
                       torch.arange(start=-k_max, end=0, step=1, device=device)), 0)

        self.sqrt_eig = size * math.sqrt(2.0) * sigma * ((4 * (math.pi ** 2) * (k ** 2) + tau ** 2) ** (-alpha / 2.0))
        self.sqrt_eig[0] = 0.0

    def sample(self):
        coeff = torch.randn(self.size, dtype=torch.cfloat, device=self.device)
        coeff = self.sqrt_eig * coeff
        return torch.fft.ifft(coeff).real

# Burgers' Equation Solver using Crank-Nicolson Method
def burgers_solver_cn(u0, t_span, s, visc, device):
    dt = (t_span[1] - t_span[0]) / s
    u = u0.clone()
    k = torch.fft.fftfreq(s, d=dt).to(device) * 2 * math.pi

    laplacian = -k ** 2
    for _ in range(s):
        u_hat = torch.fft.fft(u)
        dudx = torch.fft.ifft(1j * k * u_hat).real
        nonlinear_term = -0.5 * dudx * u

        # Crank-Nicolson update
        u_hat_new = (torch.fft.fft(u + dt * nonlinear_term)) / (1 - 0.5 * dt * visc * laplacian)
        u = torch.fft.ifft(u_hat_new).real

    return u


# Function to generate Burgers' equation data
def generate_burgers_data(N, s, visc, gamma, tau, sigma, device):
    t_span = (0, 1)
    input_data = torch.zeros((N, s), device=device)
    output_data = torch.zeros((N, s), device=device)
    grf = GaussianRF(s, gamma, tau, sigma, device=device)

    for j in range(N):
        u0 = grf.sample()
        u = burgers_solver_cn(u0, t_span, s, visc, device)
        input_data[j, :] = u0
        output_data[j, :] = u

    return input_data, output_data


# Function to train the model
import torch.nn.functional as F
from timeit import default_timer

def train_model(train_loader, epochs, batch_size, modes, width, learning_rate):
    device = torch.device("cuda")
    model = FNO1d(modes, width).to(device)
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-4)
    scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=epochs)

    myloss = LpLoss(size_average=False)

    for ep in range(epochs):
        model.train()
        for x, y in train_loader:
            x, y = x.to(device), y.to(device)
            optimizer.zero_grad()
            out = model(x)
            loss = myloss(out.view(batch_size, -1), y.view(batch_size, -1))
            loss.backward()
            optimizer.step()
            scheduler.step()

    return model



# Function to evaluate the model
def evaluate_model(model, test_loader):
    model.eval()
    myloss = LpLoss(size_average=False)
    min_test_loss = float('inf')  # Initialize with a very large number

    with torch.no_grad():
        for x, y in test_loader:
            x, y = x.cuda(), y.cuda()
            out = model(x)
            test_loss = myloss(out.view(1, -1), y.view(1, -1)).item()

            # Update min_test_loss if the current loss is lower
            if test_loss < min_test_loss:
                min_test_loss = test_loss

    return min_test_loss



# Main Experiment
def run_experiment(visc, gamma, tau, sigma, N, s, ntrain, ntest, epochs, batch_size, learning_rate, modes, width):
    device = torch.device("cuda")

    # Generate data
    input_data, output_data = generate_burgers_data(N, s, visc, gamma, tau, sigma, device)

    # Prepare data for training and testing
    sub = 2**3
    h = 2**13 // sub
    s = h
    x_data = input_data[:, ::sub]
    y_data = output_data[:, ::sub]
    x_train = x_data[:ntrain, :].reshape(ntrain, s, 1)
    y_train = y_data[:ntrain, :]
    x_test = x_data[-ntest:, :].reshape(ntest, s, 1)
    y_test = y_data[-ntest:, :]

    # Data loaders
    train_loader = DataLoader(torch.utils.data.TensorDataset(x_train, y_train), batch_size=batch_size, shuffle=True)
    test_loader = DataLoader(torch.utils.data.TensorDataset(x_test, y_test), batch_size=batch_size, shuffle=False)

    # Train model
    model = train_model(train_loader, epochs, batch_size, modes, width, learning_rate)

    # Evaluate model
    test_loss = evaluate_model(model, test_loader)
    print(f"Test Loss: {test_loss}")
    

# Assuming you have already trained your model and have test_loader ready

# Select a specific sample from the test set (e.g., the first sample)
    sample_index = 0  # Change this index to select a different sample
    x, y = test_loader.dataset[sample_index]

    # Move to CUDA if using GPU
    x, y = x.cuda(), y.cuda()

    # Use the model to predict the output
    with torch.no_grad():
        pred = model(x.unsqueeze(0)).view(-1)

    # Convert tensors to CPU for plotting
    x = x.squeeze().cpu()
    y = y.squeeze().cpu()
    pred = pred.cpu()

    # Plotting
    plt.figure(figsize=(12, 8))

    # Plot initial condition
    plt.subplot(3, 1, 1)
    plt.plot(x, label='Initial Condition')
    plt.title('Initial Condition')
    plt.legend()
    
    
    # Plot corresponding output data
    plt.subplot(3, 1, 2)
    plt.plot(y, label='True Output')
    plt.title('True Output Data')
    plt.legend()
    
    
    # Plot model's prediction
    plt.subplot(3, 1, 3)
    plt.plot(pred, label='Model Prediction')
    plt.title('Model Prediction')
    plt.legend()

    plt.tight_layout()
    plt.savefig('/content/drive/My Drive/plot14.png')
        # Save model if needed
        # torch.save(model, 'model/ns_fourier_burgers')

# Run the experiment with specific parameters
run_experiment(visc=1/10000, gamma=2.5, tau=7, sigma=49, N=256, s=8192, ntrain=200, ntest=20, epochs=200, batch_size=20, learning_rate=0.001, modes=16, width=64)
